import{createFilter as h}from"@rollup/pluginutils";import p from"path";var y=(t={})=>{t.transform||(t.transform=e=>e);const i={},m=t.alwaysOutput??!1,d=h(t.include??["**/*.css"],t.exclude??[]),l=(e,r,s=new Set)=>{if(s.has(e))return[];s.add(e);const n=[e];return r(e).importedIds.forEach(o=>{n.push(...l(o,r,s))}),n};return{name:"import-css",transform(e,r){var s;if(!d(r))return;const n=t.minify?S(t.transform(e)):t.transform(e);(!i[r]||i[r]!=n)&&(i[r]=n);const o=this.getModuleInfo(r);return t.modules||((s=o.assertions)==null?void 0:s.type)=="css"?{code:`const sheet = new CSSStyleSheet();sheet.replaceSync(${JSON.stringify(n)});export default sheet;`,map:{mappings:""}}:{code:`export default ${JSON.stringify(n)};`,map:{mappings:""}}},generateBundle(e,r){let s={},n=null;for(let a in r)s=Object.assign(s,r[a].modules),n||(n=r[a].facadeModuleId);const o=l(n,this.getModuleInfo),c=Object.entries(i).sort((a,u)=>o.indexOf(a[0])-o.indexOf(u[0])).map(([a,u])=>{if(!s[a])return u}).join(`
`);if(c.trim().length<=0&&!m)return;const f=()=>{const a=t.output??e.file??"bundle.js";return`${p.basename(a,p.extname(a))}.css`},g=()=>{if(t.output)return t.output;if(!e.assetFileNames)return`${f()}.css`};this.emitFile({type:"asset",name:f(),fileName:g(),source:c})}}};function S(t){return t=t.replace(/\/\*(?:(?!\*\/)[\s\S])*\*\/|[\r\n\t]+/g,""),t=t.replace(/ {2,}/g," "),t=t.replace(/ ([{:}]) /g,"$1"),t=t.replace(/([{:}]) /g,"$1"),t=t.replace(/([;,]) /g,"$1"),t=t.replace(/ !/g,"!"),t}export{y as default};
